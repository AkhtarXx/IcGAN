-- This file reads the dataset generated by genreateEncoderDataset.lua and
-- trains an encoder net that learns to map an image X to a noise vector Z.

require 'image'
require 'nn'
require 'optim'
util = paths.dofile('util.lua')
torch.setdefaulttensortype('torch.FloatTensor')

local function getParameters()
  local opt = {
        name = 'encoder',
        batchSize = 64,
        outputPath= 'checkpoints/',        -- path used to store the encoder network
        datasetPath = 'mnist/generatedDataset/', -- folder where the dataset is stored (not the file itself)
        split = 0.66,           -- split between train and test (i.e 0.66 -> 66% train, 33% test)
        nConvLayers = 3,        -- # of convolutional layers on the net
        nf = 128, --512 for AAE -- #  of filters in hidden layer
        nEpochs = 6,            -- #  of epochs
        lr = 0.0001,            -- initial learning rate for adam
        beta1 = 0.1,            -- momentum term of adam
        display = 1,            -- display 1= train and test error, 2 = error + batches images, 0 = false
        gpu = 1                 -- gpu = 0 is CPU mode. gpu=X is GPU mode on GPU X
        
  }
  
  for k,v in pairs(opt) do opt[k] = tonumber(os.getenv(k)) or os.getenv(k) or opt[k] end
  
  if opt.display then require 'display' end
  
  return opt
end

local function readDataset(path)
-- There's expected to find in path a file named groundtruth.dmp
-- which contains the image paths / image tensors and their vector noises.
    local images
    local data = torch.load(path..'groundtruth.dmp')
    local noises = data.noises
    
    if data.storeAsTensor then
        images = data.images 
        assert(noises:size(1)==images:size(1), "groundtruth.dmp is corrupted, number of images and noises is not equal. Create the dataset again.")
    else
        assert(noises:size(1)==#data.imNames, "groundtruth.dmp is corrupted, number of images and noises is not equal. Create the dataset again.")
        
        -- Load images
        local tmp = image.load(data.relativePath..data.imNames[1])
        images = torch.Tensor(#data.imNames, data.imSize[1], data.imSize[2], data.imSize[3])
        images[{{1},{},{},{}}] = tmp
        
        for i=2,#data.imNames do
            images[{{i},{},{},{}}] = image.load(data.relativePath..data.imNames[i])
        end
    end

    return images, noises
end

local function splitTrainTest(x, y, split)
    local xTrain, yTrain, xTest, yTest
    
    local nSamples = x:size(1)
    local splitInd = torch.floor(split*nSamples)
    
    xTrain = x[{{1,splitInd},{},{},{}}]
    yTrain = y[{{1,splitInd},{},{},{}}]
    
    xTest = x[{{splitInd+1,nSamples},{},{},{}}]
    yTest = y[{{splitInd+1,nSamples},{},{},{}}]
    
    return xTrain, yTrain, xTest, yTest
end

local function weights_init(m)
   local name = torch.type(m)
   if name:find('Convolution') then
      m.weight:normal(0.0, 0.02)
      m.bias:fill(0)
   elseif name:find('BatchNormalization') then
      if m.weight then m.weight:normal(1.0, 0.02) end
      if m.bias then m.bias:fill(0) end
   end
end

local function getEncoderAEV(sample, hiddenLayerSize, outputSize)
    -- Encoder architecture taken from https://github.com/y0ast/VAE-Torch, which is
    -- based on Auto-Encoding Variational Bayes paper from D. Kingma and M. Welling
    local inputSize = nn.View(-1):forward(sample):size()[1] --xTrain[1]:size(1)*xTrain[1]:size(2)*xTrain[1]:size(3)*xTrain[1]:size(4)
    local encoder = nn.Sequential()
    encoder:add(nn.View(-1):setNumInputDims(3)) -- Explanation of this reshape on getEnocderAAE function
    encoder:add(nn.Linear(inputSize, hiddenLayerSize))
    encoder:add(nn.ReLU(true))
    
    local mean_logvar = nn.ConcatTable()
    mean_logvar:add(nn.Linear(hiddenLayerSize, outputSize))
    mean_logvar:add(nn.Linear(hiddenLayerSize, outputSize))

    encoder:add(mean_logvar)
    
    local criterion = nn.DistKLDivCriterion()
    
    return encoder, criterion
end

local function getEncoderAAE(sample, hiddenLayerSize, outputSize)
  -- Encoder architecture taken from Adversarial Autoencoders from A. Makhzan et al.
  -- "The encoder, decoder and discriminator each have two layers of 1000 hidden units with
  -- ReLU activation function. The autoencoder is trained with a Euclidean cost function for reconstruction. 
    local inputSize = nn.View(-1):forward(sample):size()[1] --xTrain[1]:size(1)*xTrain[1]:size(2)*xTrain[1]:size(3)*xTrain[1]:size(4)
    local encoder = nn.Sequential()
    -- This layer reshapes a tensor of #samples x im3 x im2 x im1 to
    -- #samples x im3*im2*im1.
    --  · View(-1) -> reshape to one-dimension tensor
    --  · setNumInputDims(3) --> original input has 3 dimensions, therefore the 
    --    4th dimension (which is the first, #samples), indicates the number of samples.
    --    This allows to create minibatches: every row is a sample.
    encoder:add(nn.View(-1):setNumInputDims(3))
    encoder:add(nn.Linear(inputSize, hiddenLayerSize))
    encoder:add(nn.ReLU(true))
    encoder:add(nn.Linear(hiddenLayerSize, outputSize))
    --encoder:add(nn.ReLU(true))
    
    local criterion = nn.MSECriterion() --nn.AbsCriterion()
    
    return encoder, criterion
end

local function getEncoderVAE_GAN(sample, nFiltersBase, outputSize, nConvLayers)
  -- Encoder architecture taken from Autoencoding beyond pixels using a learned similarity metric (VAE/GAN hybrid)
  
  -- Sample is used to know the dimensionality of the data. 
  -- For convolutional layers we are only interested in the third dimension (RGB or grayscale)
    local inputSize = sample:size(1)
    local encoder = nn.Sequential()
    -- Assuming nFiltersBase = 64, nConvLayers = 3
    -- 1st Conv layer: 5×5 64 conv. ↓, BNorm, ReLU
    --           Data: 32x32 -> 16x16
    encoder:add(nn.SpatialConvolution(inputSize, nFiltersBase, 5, 5, 2, 2, 2, 2))
    encoder:add(nn.SpatialBatchNormalization(nFiltersBase))
    encoder:add(nn.ReLU(true))
    
    -- 2nd Conv layer: 5×5 128 conv. ↓, BNorm, ReLU
    --           Data: 16x16 -> 8x8
    -- 3rd Conv layer: 5×5 256 conv. ↓, BNorm, ReLU
    --           Data: 8x8 -> 4x4
    local nFilters = nFiltersBase
    for i=2,nConvLayers do
        encoder:add(nn.SpatialConvolution(nFilters, nFilters*2, 5, 5, 2, 2, 2, 2))
        encoder:add(nn.SpatialBatchNormalization(nFilters*2))
        encoder:add(nn.ReLU(true))
        nFilters = nFilters * 2
    end
    
    -- 4th FC layer: 2048 fully-connected
    --         Data: 4x4 -> 16
    encoder:add(nn.View(-1):setNumInputDims(3)) -- reshape data to 2d tensor (samples x the rest)
    -- Assuming squared images and conv layers configuration (kernel, stride and padding) is not changed:
    --nFilterFC = (imageSize/2^nConvLayers)²*nFiltersLastConvNet
    local inputFilterFC = (sample:size(2)/2^nConvLayers)^2*nFilters
    encoder:add(nn.Linear(inputFilterFC, inputFilterFC)) 
    encoder:add(nn.BatchNormalization(inputFilterFC))
    encoder:add(nn.ReLU(true))
    encoder:add(nn.Linear(inputFilterFC, outputSize)) 
    --encoder:add(nn.BatchNormalization(outputSize))
    --encoder:add(nn.ReLU(true))
    
    local criterion = nn.MSECriterion()
    
    return encoder, criterion
end

local function assignBatches(batchX, batchY, x, y, tmpX, tmpY, batch, batchSize, shuffle)
    
    data_tm:reset(); data_tm:resume()
    
    local idx = 1
    for i = batch, batch+batchSize-1 do -- Haven't found a way to do this without a for loop
         tmpX[idx] = x[{{shuffle[i]},{},{},{}}]
         tmpY[idx] = y[{{shuffle[i]},{},{},{}}]
         idx = idx + 1
    end
    data_tm:stop()
    batchX:copy(tmpX)
    batchY:copy(tmpY)
    
    return batchX, batchY
end

local function displayConfig(disp, title)
    -- initialize error display configuration
    local errorData, errorDispConfig
    if disp then
        errorData = {}
        errorDispConfig =
          {
            title = 'Encoder error - ' .. title,
            win = 1,
            labels = {'Batch iterations', 'Train error', 'Test error'},
            ylabel = "Error",
            legend='always'
          }
    end
    return errorData, errorDispConfig
end

function main()

  local opt = getParameters()
  if opt.display then display = require 'display' end
  
  -- Set timers
  local epoch_tm = torch.Timer()
  local tm = torch.Timer()
  data_tm = torch.Timer()

  -- Read dataset
  local samples, noises
  samples, noises = readDataset(opt.datasetPath)
  
  -- Split train and test
  local xTrain, yTrain, xTest, yTest
  xTrain, yTrain, xTest, yTest = splitTrainTest(samples, noises, opt.split)

  -- samples: #samples x im3 x im2 x im1
  -- noise: #samples x 100 x 1 x 1 
  
  -- Set network architecture
  local encoder, criterion = getEncoderVAE_GAN(xTrain[1], opt.nf, yTrain:size(2), opt.nConvLayers)
  --encoder:apply(weights_init)
    
  -- Initialize batches
  local batchX = torch.Tensor(opt.batchSize, xTrain:size(2), xTrain:size(3), xTrain:size(4))
  local batchY = torch.Tensor(opt.batchSize, yTrain:size(2))
  
  -- Copy variables to GPU
  if opt.gpu > 0 then
     require 'cunn'
     cutorch.setDevice(opt.gpu)
     batchX = batchX:cuda();  batchY = batchY:cuda();
     encoder:cuda()
     criterion:cuda()
  end
  
  local params, gradParams = encoder:getParameters() -- This has to be always done after cuda call
  
  -- Define optim (general optimizer)
  local errorTrain
  local errorTest
  local function optimFunction(params) -- This function needs to be declared here to avoid using global variables.
      -- reset gradients (gradients are always accumulated, to accommodat batch methods)
      gradParams:zero()
      
      local outputs = encoder:forward(batchX)
      errorTrain = criterion:forward(outputs, batchY)
      local dloss_doutput = criterion:backward(outputs, batchY)
      encoder:backward(batchX, dloss_doutput)
      
      return errorTrain, gradParams
  end
  
  local optimState = {
     learningRate = opt.lr,
     beta1 = opt.beta1,
  }
  
  local nTrainSamples = xTrain:size(1)
  local nTestSamples = xTest:size(1)
  local tmpX = torch.Tensor(batchX:size())
  local tmpY = torch.Tensor(batchY:size())
  
  -- Initialize display configuration (if enabled)
  local errorData, errorDispConfig = displayConfig(opt.display, opt.name)
  
  paths.mkdir(opt.outputPath)
  
  -- Train network
  local batchIterations = 0 -- for display purposes only
  for epoch = 1, opt.nEpochs do
      epoch_tm:reset()
      local shuffle = torch.randperm(nTrainSamples)
      for batch = 1, nTrainSamples-opt.batchSize+1, opt.batchSize  do
          tm:reset()
          -- Assign batches
          --[[local splitInd = math.min(batch+opt.batchSize, nTrainSamples)
          batchX:copy(xTrain[{{batch,splitInd}}])
          batchY:copy(yTrain[{{batch,splitInd}}])--]]
          
          batchX, batchY = assignBatches(batchX, batchY, xTrain, yTrain, tmpX, tmpY, batch, opt.batchSize, shuffle)
          
          if opt.display == 2 and batchIterations % 20 == 0 then
              display.image(image.toDisplayTensor(batchX,0,torch.round(math.sqrt(opt.batchSize))), {win=2, title='Train mini-batch'})
          end
          
          -- Update network
          optim.adam(optimFunction, params, optimState)
          
          -- Display train and test error
          if opt.display and batchIterations % 20 == 0 then
              -- Test error
              batchX, batchY = assignBatches(batchX, batchY, xTest, yTest, tmpX, tmpY, torch.random(1,nTestSamples-opt.batchSize+1), opt.batchSize, torch.randperm(nTestSamples))
              local outputs = encoder:forward(batchX)
              errorTest = criterion:forward(outputs, batchY)
              table.insert(errorData,
              {
                batchIterations, -- x-axis
                errorTrain, -- y-axis for label1
                errorTest -- y-axis for label2
              })
              display.plot(errorData, errorDispConfig)
              if opt.display == 2 then
                  display.image(image.toDisplayTensor(batchX,0,torch.round(math.sqrt(opt.batchSize))), {win=3, title='Test mini-batch'})
              end
          end
          
          -- Verbose
          if ((batch-1) / opt.batchSize) % 1 == 0 then
             print(('Epoch: [%d][%4d / %4d]  Error (train): %.4f  Error (test): %.4f  '
                       .. '  Time: %.3f s  Data time: %.3f s'):format(
                     epoch, ((batch-1) / opt.batchSize),
                     math.ceil(nTrainSamples / opt.batchSize),
                     errorTrain and errorTrain or -1,
                     errorTest and errorTest or -1,
                     tm:time().real, data_tm:time().real))
         end
         batchIterations = batchIterations + 1
      end
      print(('End of epoch %d / %d \t Time Taken: %.3f s'):format(
            epoch, opt.nEpochs, epoch_tm:time().real))
            
      -- Store network
      util.save(opt.outputPath .. opt.name .. '_' .. epoch .. 'epochs.t7', encoder, opt.gpu)
  end
  
end

main()